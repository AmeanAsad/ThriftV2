{"version":3,"sources":["logo.svg","components/textValidator.jsx","components/navigation.jsx","components/login.jsx","components/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextValidator","this","props","rest","errorMessages","validators","requiredError","validatorListener","ref","r","input","errorText","state","isValid","style","color","getErrorMessage","ValidatorComponent","Navigation","Navbar","bg","variant","Brand","className","Nav","to","Link","href","Component","Credentials","td_id","redirect","onSubmit","e","axios","post","customer_id","headers","then","res","setState","console","log","catch","err","onChange","target","name","value","pathname","marginTop","Row","Col","md","span","Card","Form","padding","width","Group","Label","Button","type","HomepageMain","user","labels","data1","chart1","chart2","labels1","labels2","title1","title2","savings","periods","categories","savingPlans","status","preventDefault","saving","cus_id","location","dat","data","config","datu","datasets","backgroundColor","hoverBackgroundColor","table1","table2","table3","savingPlan","savingCategories","denial","d","push","i","length","el","tb2","tb3","Header","as","Body","Title","Text","ListGroup","Item","Math","round","Table","striped","bordered","hover","App","path","exact","component","HomepagemMain","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.5c0d70ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { ValidatorComponent } from \"react-form-validator-core\";\n\nclass TextValidator extends ValidatorComponent {\n    render() {\n        const {\n            errorMessages,\n            validators,\n            requiredError,\n            validatorListener,\n            ...rest\n        } = this.props;\n\n        return (\n            <div>\n                <input\n                    {...rest}\n                    ref={r => {\n                        this.input = r;\n                    }}\n                />\n                {this.errorText()}\n            </div>\n        );\n    }\n\n    errorText() {\n        const { isValid } = this.state;\n\n        if (isValid) {\n            return null;\n        }\n\n        return <div style={{ color: \"red\" }}>{this.getErrorMessage()}</div>;\n    }\n}\n\nexport default TextValidator;\n","import React, { Component } from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\nimport \"./css/login.css\";\n\nclass Navigation extends Component {\n    state = {}\n    render() {\n        return (\n            <div>\n\n                <Navbar bg=\"light\" variant=\"light\">\n                    <Navbar.Brand className=\"brand\" >Thrift</Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <Link to='/'>  <Nav.Link className=\"nav-item\" href=\"#home\">Home</Nav.Link></Link>\n                    </Nav>\n                </Navbar>\n            </div>\n\n        );\n    }\n}\n\nexport default Navigation;","import React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport PropTypes from \"prop-types\";\nimport { ValidatorForm } from \"react-form-validator-core\";\nimport TextValidator from \"./textValidator\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport Navigation from './navigation'\nimport \"./css/login.css\";\n\n\nclass Credentials extends Component {\n    state = {\n        td_id: \"\",\n        redirect: false,\n    }\n\n\n    onSubmit = e => {\n\n        const { td_id } = this.state;\n\n        const request_data = { customer_id: td_id }\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        axios\n            .post(\"http://127.0.0.1:8000/api/get/customer\",\n                { customer_id: td_id },\n                config)\n            .then(res => {\n                this.setState({ redirect: true });\n                console.log(\"Worked\")\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n    };\n\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n\n        const { td_id } = this.state;\n\n        if (this.state.redirect) {\n            return (<Redirect to={{\n                pathname: \"/home\",\n                state: { \"customer_id\": this.state.td_id }\n            }} />)\n        }\n\n\n        return (<div className=\"login-wrapper\">\n\n            <div className=\"dimmer\">\n\n\n                <Navigation />\n                <h1 style={{ marginTop: \"3%\" }} className=\"headers\"> Welcome to Thrift! </h1>\n\n                <div className=\"body1\">\n\n                    <h2 className=\"headers\"> About </h2>\n                    <p className=\"text\"> A lot of banking apps provide users with insights and information on their spending. However, there\n                        are almost no tools provided that make use of that data to help people. The main idea behind Thrift\n                        was to take initiative in exploring how to use this available banking data to provide useful tools\n                        for people to benefit from. The specific problem that Thrift tackles is how to help people save money\n                        in an optimized way using the information provided by their banking history . Saving money is hard,\n                        especially when you are trying to budget yourself. Thrift analyzes people's spending habits\n                        and provides people with specific budget cuts to certain expenditures in order for them to be able\n                        to save a desired amount of money.\n            </p>\n\n                </div>\n\n                <Row style={{}} className=\"justify-content-md-center\">\n                    <Col md={{ span: 5 }}>\n                        <Card className=\"card-wrapper\">\n                            <ValidatorForm ref=\"form\" onSubmit={this.onSubmit}>\n                                <Form style={{ padding: \"5%\", width: \"100%\" }}>\n\n                                    <Form.Group >\n                                        <Form.Label className=\"label\"> TD-Bank ID </Form.Label>\n\n                                        <TextValidator style={{ width: \"70%\" }}\n                                            className=\"text-validator\"\n                                            onChange={this.onChange}\n                                            name=\"td_id\"\n                                            value={td_id}\n                                            validators={[\"required\",]}\n                                            errorMessages={[\n                                                \"This field is required\",\n\n                                            ]}\n                                        />\n                                    </Form.Group>\n\n                                    <Button\n                                        className=\"login-button\"\n                                        variant=\"primary\"\n                                        type=\"submit\"\n                                    >\n                                        Submit\n                            </Button>\n                                </Form>\n                            </ValidatorForm>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <div className=\"body2\">\n\n                    <h2 className=\"headers\"> Usage </h2>\n                    <p className=\"text\"> Thrift is built based upon an open source API provided by TD Bank called the <a href='https://td-davinci.com/'>Da-Vinci API</a>.\n                    Therefore, unfortunately, Thrift only works for the customers provided by the API.\n                    The API has over 1,000,000 sample customers, and to use app you can go to any of these customers\n                        and insert the customer id in the form below.\n            </p>\n                    <p className=\"text\"> Here are some random customer ID's if you wish to test the program</p>\n                    <ul>\n                        <li className=\"text\" >49a3fce9-f20b-43bb-9616-492f9b7f14b4</li>\n                        <li className=\"text\"> 3bfcb514-35ab-44a9-81e3-3466c2ac7916</li>\n                        <li className=\"text\"> 4463d38b-9d3a-4eec-a30a-084e6317a59c</li>\n                        <li className=\"text\"> 1a2930bf-2895-4ac2-a371-bca525262543</li>\n                    </ul>\n\n                </div>\n            </div>\n\n        </div>);\n    }\n}\n\nexport default Credentials;","import React, { Component } from 'react';\n\n\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./css/homepage.css\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Col from \"react-bootstrap/Col\";\nimport { Pie } from 'react-chartjs-2';\nimport Table from \"react-bootstrap/Table\";\nimport Navigation from './navigation'\n\nclass HomepageMain extends Component {\n    state = {\n\n        user: {},\n        labels: [],\n        data1: [],\n        chart1: [],\n        chart2: [],\n        labels1: [],\n        labels2: [],\n        title1: \"\",\n        title2: \"\",\n        customer_id: \"\",\n        savings: 0,\n        periods: 0,\n        categories: [],\n        savingPlans: [],\n        status: true,\n    }\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        user: PropTypes.object\n    };\n\n    componentDidMount() {\n        const cus_id = this.props.location.state.customer_id\n        console.log(cus_id)\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        axios\n            .post(\"http://127.0.0.1:8000/api/get/customer\",\n                { \"customer_id\": cus_id },\n                config)\n            .then(res => {\n                const datu = res.data['result']\n                this.setState({ user: datu })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n        axios\n            .post(\"http://127.0.0.1:8000/api/get/analytics\",\n                { \"customer_id\": cus_id },\n                config)\n            .then(res => {\n                const dat = res.data\n                this.setState({\n                    labels: dat['percentages'][0], data1: dat['percentages'][1],\n                    chart1: dat[\"trends\"][0][\"data\"], chart2: dat['trends'][1][\"data\"],\n                    labels1: dat[\"trends\"][0][\"months\"], labels2: dat[\"trends\"][1][\"months\"],\n                    title1: dat[\"trends\"][0][\"title\"], title2: dat[\"trends\"][1][\"title\"]\n\n                })\n\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n    }\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    onSubmit = e => {\n        e.preventDefault();\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        const saving = this.state.savings\n        const periods = this.state.periods\n        const cus_id = this.props.location.state.customer_id\n\n\n        axios\n            .post(\"http://127.0.0.1:8000/api/post/savings\",\n                { \"savings\": saving, \"periods\": periods, \"customer_id\": cus_id },\n                config)\n            .then(res => {\n                const dat = res.data\n                this.setState({ savingPlans: dat['plans'], categories: dat['categories'] })\n            })\n            .catch(err => {\n                console.log(\"error\")\n            });\n    };\n\n\n    render() {\n        const data = {\n            labels: this.state.labels,\n            datasets: [{\n                data: this.state.data1,\n                backgroundColor: [\n                    '#FF6384',\n                    '#36A2EB',\n                    '#FFCE56',\n                    '#BFD5E2',\n                    '#38369A',\n                    \"#373F51\",\n                    '#A167A5',\n                    '#157145',\n\n                ],\n                hoverBackgroundColor: [\n                    '#FF6384',\n                    '#36A2EB',\n                    '#FFCE56'\n                ]\n            }]\n        };\n\n\n        const savings = this.state.savings;\n\n        const periods = this.state.periods;\n        const table1 = [];\n        const table2 = [];\n        const table3 = [];\n        const savingPlan = this.state.savingPlans;\n        const savingCategories = this.state.categories;\n        const denial = [];\n\n        if (savingPlan[0] == 0) {\n            this.state.status = false\n        }\n        if (this.state.status = false) {\n            console.log('status denied')\n            const d = (<p> This savings plan is not feasible, please increase period or reduce savings amount</p>)\n            denial.push(d);\n        } else {\n            const denial = [];\n\n        }\n        for (var i = 0; i < savingPlan.length; i++) {\n\n\n            const el = (\n                <tr className=\"table\">\n                    <td>{savingCategories[i]}</td>\n                    <td>{savingPlan[i][\"avg_payment\"]}</td>\n                    <td>{savingPlan[i][\"payments\"]}</td>\n                </tr>\n            )\n\n            const tb2 = (\n                <tr className=\"table\">\n                    <td >{savingCategories[i]}</td>\n                    <td>{savingPlan[i][\"projected\"]}</td>\n                    <td>{savingPlan[i][\"reduction\"]}</td>\n                    <td>{savingPlan[i][\"budget\"]}</td>\n\n                </tr>)\n\n            const tb3 = (\n                <tr className=\"table\">\n                    <td>{savingCategories[i]}</td>\n                    <td>{savingPlan[i][\"monthly_budget\"]}</td>\n\n\n                </tr>)\n            table1.push(el)\n            table2.push(tb2)\n            table3.push(tb3)\n\n\n        }\n        return (<div className='homepage-wrapper'>\n\n            <div className=\"dimmer\">\n\n\n                <Navigation />\n                <Row className=\"division-one\">\n                    <Col md className=\"profile-content\">\n                        <Card className=\"card-content1\">\n                            <Card.Header as=\"h5\">  {this.state.user['surname']}  {this.state.user[\"givenName\"]}</Card.Header>\n                            <Card.Body>\n                                <Card.Title>Welcome to your finance Dashboard</Card.Title>\n                                <Card.Text>\n                                    Review your financial history and examine your trends with Thrift\n                            </Card.Text>\n                                <div className=\"list-group\">\n\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>Income: {this.state.user['totalIncome']}$</ListGroup.Item>\n                                        <ListGroup.Item>Monthly Income: {Math.round(this.state.user['totalIncome'] / 12)}$ </ListGroup.Item>\n                                        <ListGroup.Item>Account: {this.state.user['type']} </ListGroup.Item>\n                                        <ListGroup.Item>Age: {this.state.user['age']} </ListGroup.Item>\n                                    </ListGroup>\n                                </div>\n                            </Card.Body>\n\n                        </Card>\n                    </Col>\n                    <Col md className=\"percentage-content\">\n\n\n                        <Card className=\"card-2\">\n                            <Card.Body>\n                                <Card.Title>Expenditure Averages</Card.Title>\n                                <Card.Text>\n                                    Here is a summary of your expenditure averages over your transaction history with the bank:\n                            </Card.Text>\n                                <Pie className=\"pie\" data={data} />\n                            </Card.Body>\n                        </Card>\n\n                    </Col>\n\n\n                </Row>\n\n                <Row className=\"justify-content-md-center\">\n                    <div className='card5'>\n\n\n                        <Col md>\n                            <div className=\"form-wrapper\">\n                                <div className=\"card card-body mt-8\">\n\n                                    <form onSubmit={this.onSubmit}>\n                                        <div className=\"form-group\">\n                                            <label className=\"card3-text\">Savings Amount</label>\n                                            <input\n                                                type=\"number\"\n                                                className=\"form-control\"\n                                                name=\"savings\"\n                                                onChange={this.onChange}\n                                                value={savings}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label className=\"card3-text\"> Period of Saving (Months)</label>\n                                            <input\n                                                type=\"number\"\n                                                className=\"form-control\"\n                                                name=\"periods\"\n                                                onChange={this.onChange}\n                                                value={periods}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <Button className=\"login-button\" type=\"submit\"\n                                                variant='primary'>\n                                                Optimize\n                                 </Button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n\n                        </Col>\n                    </div>\n                </Row>\n\n                {denial}\n\n\n\n                <Row className=\"card6\">\n                    <h1 className=\"header\"> How it Works </h1>\n                    <p className='text'> The optimizer will start by analyzing the spending habits of the customer. This step will identify\n                        the different spending categories of the customer. Each category will then have an average payment\n                        value and a frequency of payments per month value. The optimizer will prioritize spending categories\n                        that have a high frequency and low average payments. The first table will output the amount of payments\n                        need to be reduced in for each category over the whole amounting period in order to save the specified\n                        amount.\n                </p>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr className=\"table\">\n                                <th >Spending Category</th>\n                                <th >Average Payment</th>\n                                <th >No of Payment Reductions </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {table1}\n                        </tbody>\n                    </Table>\n                </Row>\n\n                <Row className=\"card6\">\n\n                    <p className='text'> The next step is for the optimizer to use the previous transaction history to project how much the customer is expected to spend in each category, and hence how much should be deducted\n                        from each category in order for the customer to save the specified amount. The table below outlines\n                    these values. </p>\n                    <Table className=\"table-hover\" striped bordered hover>\n                        <thead>\n                            <tr className=\"table\">\n                                <th >Spending Category</th>\n                                <th >Projected Spending</th>\n                                <th> Required Reduction</th>\n                                <th > Total Budget</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {table2}\n                        </tbody>\n                    </Table>\n                </Row>\n\n                <Row className=\"card6\">\n                    <p className='text' > The final result, the one shown to a customer, is a table outlining the category of\n                    spending and a monthly budget for that category. In order for the optimizer to work properly,\n                    the customer should maintain their budgets for their other spending categories as predicted\n                from their transaction history analysis.  </p>\n                    <Table striped bordered hover>\n\n                        <thead>\n                            <tr className=\"table\">\n                                <th >Spending Category</th>\n                                <th > Monthly Budget </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {table3}\n                        </tbody>\n                    </Table>\n                </Row>\n            </div>\n        </div >);\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user\n});\n\nexport default HomepageMain;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport {\n  //  Replace Hash with BrowserRouter if server fails\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport Credentials from \"./components/login\"\nimport HomepagemMain from \"./components/homepage\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Credentials} />\n          <Route path=\"/home\" exact component={HomepagemMain} />\n\n        </Switch>\n      </Router >\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}